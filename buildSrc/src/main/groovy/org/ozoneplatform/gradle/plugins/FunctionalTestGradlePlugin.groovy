/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * Modified from the original file found at:
 *
 *      https://github.com/grails/grails-core/tree/master/grails-gradle-plugin
 */

package org.ozoneplatform.gradle.plugins

import groovy.transform.CompileDynamic
import groovy.transform.CompileStatic

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.dsl.DependencyHandler
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.SourceSetContainer
import org.gradle.api.tasks.TaskContainer
import org.gradle.api.tasks.testing.Test
import org.gradle.language.base.plugins.LifecycleBasePlugin

/**
 * Gradle plugin for adding separate src/integration-test folder to hold integration tests
 *
 * Adds integrationTestCompile and integrationTestRuntime configurations that extend from testCompile and testRuntime
 *
 **/
class FunctionalTestGradlePlugin implements Plugin<Project> {

    static final String GRAILS_ENVIRONMENT_PROPERTY = 'grails.env'

    static final String SOURCE_SET_NAME = 'functionalTest'

    static final String TASK_NAME = 'functionalTest'

    static final String COMPILE_CONFIGURATION = 'functionalTestCompile'
    static final String RUNTIME_CONFIGURATION = 'functionalTestRuntime'

    boolean ideaIntegration = true

    String sourceFolderName = "src/functional-test"

    @Override
    @CompileStatic
    void apply(Project project) {
        File[] sourceDirs = findIntegrationTestSources(project)
        if (sourceDirs) {
            List<File> acceptedSourceDirs = []

            SourceSetContainer sourceSets = SourceSets.findSourceSets(project)

            SourceSet functionalTestSourceSet = sourceSets.create(SOURCE_SET_NAME)

            for (File srcDir in sourceDirs) {
                registerSourceDir(functionalTestSourceSet, srcDir)
                acceptedSourceDirs.add srcDir
            }

            DependencyHandler dependencies = project.dependencies
            dependencies.add(COMPILE_CONFIGURATION, SourceSets.findMainSourceSet(project).output)
            dependencies.add(COMPILE_CONFIGURATION, SourceSets.findSourceSet(project, SourceSet.TEST_SOURCE_SET_NAME).output)
            dependencies.add(COMPILE_CONFIGURATION, project.configurations.findByName("testCompile"))
            dependencies.add(RUNTIME_CONFIGURATION, project.configurations.findByName("testRuntime"))

            TaskContainer tasks = project.tasks
            Test functionalTestTask = tasks.create(TASK_NAME, Test)
            functionalTestTask.group = LifecycleBasePlugin.VERIFICATION_GROUP
            setClassesDirs(functionalTestTask, functionalTestSourceSet)
            functionalTestTask.classpath = functionalTestSourceSet.runtimeClasspath
            functionalTestTask.maxParallelForks = 1
            functionalTestTask.reports.html.enabled = false
            functionalTestTask.shouldRunAfter("test")

            setSystemProperties(functionalTestTask)

            // Don't run functional tests by default
            // tasks.findByName("check")?.dependsOn(functionalTestTask)

            /*
            TODO: Re-add support later

            TestReport testReportTask = tasks.create("mergeTestReports", TestReport)
            testReportTask.destinationDir = project.file("$project.buildDir/reports/tests")

            // These must point to the binary test results directory generated by a Test task instance.
            // If Test task instances are specified directly, this task would depend on them and run them.
            testReportTask.reportOn project.files("$project.buildDir/test-results/binary/test", "$project.buildDir/test-results/binary/integrationTest"),
                                    // different versions of Gradle store these results in different places. ugh.
                                    project.files("$project.buildDir/test-results/test/binary", "$project.buildDir/test-results/integrationTest/binary")

            functionalTestTask.finalizedBy testReportTask
            */

            if (ideaIntegration) {
                integrateIdea(project, acceptedSourceDirs)
            }
        }
    }

    private void setSystemProperties(Test testTask) {
        testTask.systemProperty(GRAILS_ENVIRONMENT_PROPERTY, System.getProperty(GRAILS_ENVIRONMENT_PROPERTY, "test"))
    }

    @CompileDynamic
    protected void setClassesDirs(Test testTask, SourceSet sourceSet) {
        try {
            // Gradle 4.x
            def classesDirs = sourceSet.output.classesDirs
            testTask.setTestClassesDirs(classesDirs)
        } catch (ignored) {
            // Gradle 3.x
            testTask.setTestClassesDir(sourceSet.output.classesDir)
        }

    }

    private void registerSourceDir(SourceSet sourceSet, File srcDir) {
        sourceSet."${srcDir.name}".srcDir srcDir
    }

    private integrateIdea(Project project, List<File> acceptedSourceDirs) {
        project.afterEvaluate {
            if (project.convention.findByName('idea')) {
                // IDE integration for IDEA. Eclipse plugin already handles all source folders.
                project.idea {
                    module {
                        acceptedSourceDirs.each {
                            testSourceDirs += it
                        }
                    }
                }
            }
        }
    }

    @CompileStatic
    File[] findIntegrationTestSources(Project project) {
        project.file(sourceFolderName)
               .listFiles({ File file -> file.isDirectory() && !file.name.contains('.') } as FileFilter)
    }

}
