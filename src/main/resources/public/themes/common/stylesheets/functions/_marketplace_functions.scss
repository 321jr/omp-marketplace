/**
 * Functions for getting components of marketplace theme structures
 */

//component theme indexes
$COMPONENT_BASE_COLOR_INDEX: 1;
$COMPONENT_GRADIENT_INDEX: 2;
$COMPONENT_TEXT_COLOR_INDEX: 3;
$COMPONENT_OUTER_BORDER_COLOR: 4;
$COMPONENT_BODY_BORDER_COLOR: 5;

//button theme indexes
$BUTTON_GRADIENT_INDEX: 1;
$BUTTON_TEXT_COLOR_INDEX: 2;
$BUTTON_BORDER_COLOR_INDEX: 3;

//toolbar theme indexes
$TOOLBAR_GRADIENT_INDEX: 1;
$TOOLBAR_TEXT_COLOR_INDEX: 2;

//grid theme indexes
$GRID_BACKGROUND_COLOR_INDEX: 1;
$GRID_TEXT_COLOR_INDEX: 2;
$GRID_BACKGROUND_GRADIENT_INDEX: 3;

//dropdown theme indexes
$DD_BACKGROUND_COLOR_INDEX: 1;
$DD_TEXT_COLOR_INDEX: 2;
$DD_BORDER_COLOR_INDEX: 3;
$DD_BACKGROUND_GRADIENT_INDEX: 4;

// --component theme functions-----------------------------------

@function getComponentBaseColor($component_theme) {
    @return nth($component_theme, $COMPONENT_BASE_COLOR_INDEX);
}

@function getComponentGradientColors($component_theme) {
    @return nth($component_theme, $COMPONENT_GRADIENT_INDEX);
}

@function getComponentTextColor($component_theme) {
    @return nth($component_theme, $COMPONENT_TEXT_COLOR_INDEX);
}

@function getComponentOuterBorderColor($component_theme) {
    @return nth($component_theme, $COMPONENT_OUTER_BORDER_COLOR);
}

@function getComponentBodyBorderColor($component_theme) {
    @return nth($component_theme, $COMPONENT_BODY_BORDER_COLOR);
}

// --button theme functions-----------------------------------
@function getButtonGradient($button_theme) {
    @return nth($button_theme, $BUTTON_GRADIENT_INDEX);
}

@function getButtonTextColor($button_theme) {
    @return nth($button_theme, $BUTTON_TEXT_COLOR_INDEX);
}

@function getButtonBorderColor($button_theme) {
    $color: nth($button_theme, $BUTTON_BORDER_COLOR_INDEX);
    @if $color == null {
        @return transparent;
    }
    @else {
        @return nth($button_theme, $BUTTON_BORDER_COLOR_INDEX);
    }
}

// --toolbar theme functions-----------------------------------
@function getToolbarGradient($toolbar_theme) {
    @return nth($toolbar_theme, $TOOLBAR_GRADIENT_INDEX);
}

@function getToolbarTextColor($toolbar_theme) {
    @return nth($toolbar_theme, $TOOLBAR_TEXT_COLOR_INDEX);
}

// --grid theme functions-----------------------------------
@function getGridTextColor($grid_theme) {
    @return nth($grid_theme, $GRID_TEXT_COLOR_INDEX);
}

@function getGridBackgroundColor($grid_theme) {
    @return nth($grid_theme, $GRID_BACKGROUND_COLOR_INDEX);
}

@function getGridBackgroundGradient($grid_theme) {
    @if length($grid_theme) < $GRID_BACKGROUND_GRADIENT_INDEX {
        @return null;
    }
    @return nth($grid_theme, $GRID_BACKGROUND_GRADIENT_INDEX);
}

// --drop down theme functions-----------------------------------

@function getDDTextColor($dd_theme) {
    @return nth($dd_theme, $DD_TEXT_COLOR_INDEX);
}

@function getDDBorderColor($dd_theme) {
    @return nth($dd_theme, $DD_BORDER_COLOR_INDEX);
}

@function getDDBackgroundColor($dd_theme) {
    @return nth($dd_theme, $DD_BACKGROUND_COLOR_INDEX);
}

@function getDDBackgroundGradient($dd_theme) {
    @if length($dd_theme) < $DD_BACKGROUND_GRADIENT_INDEX {
        @return null;
    }
    @return nth($dd_theme, $DD_BACKGROUND_GRADIENT_INDEX);
}

// --utility functions-----------------------------------
@function getHighContrastColor($color) {
    @if lightness($color) < 50 {
        @return white;
    }
    @return black;
}

@function adjustColorForBackground($font-color, 
                                $background-color: $mp-window-background-color, 
                                $reversed: false) {
    $amount: 15%;

    @if getHighContrastColor($background-color) == #FFF {
        @if $reversed {
            @return darken($font-color, $amount);
        }
        @else {
            @return lighten($font-color, $amount);
        }
    }
    @else {
        @if $reversed {
            @return lighten($font-color, $amount);
        }
        @else {
            @return darken($font-color, $amount);
        }
    }
}

@function lightest($colors) {
    $i: 1;

    $lightest-color: strip-stop(nth($colors, $i));
    $lightest-i: $i;

    @each $color in $colors {
        $stripped: strip-stop($color);

        @if (lightness($stripped) > lightness($lightest-color)) {
            $lightest-color: $stripped;
            $lightest-i: $i;
        }

        $i: $i + 1;
    }

    @return $lightest-i;
}

@function darkest($colors) {
    $i: 1;

    $darkest-color: strip-stop(nth($colors, 1));
    $darkest-i: $i;

    @each $color in $colors {
        $stripped: strip-stop($color);

        @if (lightness($stripped) < lightness($darkest-color)) {
            $darkest-color: $stripped;
            $darkest-i: $i;
        }

        $i: $i + 1;
    }

    @return $darkest-i;
}
